#+TITLE: My GNU Emacs

[[README.org][en]] | [[README_ja.org][ja]]

This is my GNU Emacs. I will write about my relationship with Emacs here.

[[https://res.cloudinary.com/symdon/image/upload/v1645157040/demo_spyojf.gif]]


* Why I use Emacs

Emacs is a text editor, a software used for writing documents and code. It has a long history and a dedicated fanbase around the world, and it is still actively developed by a community today.

Emacs excels in customization, allowing users to shape it into a version that suits their preferences. Depending on what one wants to do and how they wish to do it, Emacs evolves, and this growth allows it to feel like an integral part of oneself.

Emacs can be seen as a complete runtime system of the programming language called Emacs Lisp. With Emacs Lisp, nearly all features of Emacs can be modified, and by evaluating new Emacs Lisp code on a running instance of Emacs, the behavior of existing code can be instantly altered.

Emacs Lisp is a dialect of the Lisp language. Lisp has various strengths that are not found in other languages, but discussing them in depth would be too extensive for this context. However, one of the strengths of Emacs Lisp is its flexibility.

The way scoping is handled in Emacs Lisp, along with its (almost unrestricted) approach to namespaces, fits well with a style that allows one to easily write, evaluate, and modify Lisp code. While these characteristics can be disadvantages for creating robust, complete systems, they become advantageous for quickly writing tools tailored for personal use or instantaneously modifying specific behaviors to meet small, everyday needs.

There is also a viewpoint that regards Emacs Lisp as a deficient programming language. Indeed, it may not be known for its speed, and various constraints, such as the existence of a Global Interpreter Lock (GIL) and blocking of the main thread by threads, persist. However, it is precisely because of such traits that one might prefer not to implement everything solely in Emacs Lisp. Instead, they might choose to employ external processes to realize functionalities in collaboration with the outside world.This approach encourages the utilization of knowledge beyond Emacs, thereby increasing capabilities in proportion to the depth of that knowledge.

What I can do can be further enhanced by Emacs' powerful editing capabilities and buffer management, while what I cannot do cannot be accomplished even with Emacs. In other words, Emacs grows alongside my own personal development. It is a companion that evolves with me, and that is the reason I use Emacs.

* Setup

1. Install GNU Emacs.

   See the official installation document at https://www.gnu.org/software/emacs/download.html, or you can [[Self build]].

2. Download a configuration files.

   #+begin_src
   git clone https://github.com/TakesxiSximada/.emacs.d.git ~/.emacs.d
   #+end_src

3. Start GNU Emacs.

   Start GNU Emacs Application(=emacs -nw= , =open Emacs.app= etc).

* Self build

The official GNU Emacs distribution has several features disabled. To enable them, you need to build the application yourself. Here are the steps to do that, with the environment being targeted for macOS.

1. Install dependencies.

   #+caption: Install dependencies via Homebrew
   #+begin_src bash
   brew install \
        autoconf \
        texinfo \
        imagemagick \
        gnutls
   #+end_src

2. Download GNU Emacs source code.

   #+caption: Download GNU Emacs source code via Savannah.
   #+begin_src bash
   git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git
   #+end_src

3. Move the working directory to the root directory of the source code.

   #+begin_src bash
   cd emacs
   #+end_src

4. Run the autogen script to generate the configure script.

   #+begin_src bash
   ./autogen.sh
   #+end_src

5. Execute the configure script to generate files needed for the build, such as the Makefile, specifying the features to enable as options.

   #+begin_src bash
   ./configure \
      --with-imagemagick \
      --with-mailutils \
      --with-modules \
      --with-ns \
      --with-pop \
      --with-xwidgets \
      --x-includes=/opt/X11/include \
      --x-libraries=/opt/X11/lib \
      --with-x
   #+end_src

4. Build the source code implemented in C.

   #+begin_src
   make
   #+end_src

5. Create an application bundle to be treated as an application on macOS, including the code implemented in Emacs Lisp.

   #+begin_src
   make install
   #+end_src

6. Move the application to the specified location under /Applications.

   #+begin_src
   sudo mv nextstep/Emacs.app /Applications
   #+end_src

* Emacs Literature

Emacs has dedicated fans who express their love for it through various forms, including technical essays. Within this community, there are individuals who have written about their experiences and feelings regarding Emacs, encompassing a wide range of perspectives that often include subjective and personal elements. These writings serve as a testament to their journeys in their work and aim to convey their unique thoughts. I refer to these pieces as Emacs Literature, and I enjoy reading them because they allow me to feel the humanity of the authors.

Here, I would like to introduce some renowned works of Emacs Literature. While some of these may be fictional, such distinctions are ultimately inconsequential. What truly matters is that each work overflows with love for Emacs.

- https://qiita.com/sylx/items/46bc993471cd71980aa5
- https://www.itmedia.co.jp/enterprise/articles/0706/26/news003_2.html
- https://gntm-mdk.hatenadiary.com/entry/2016/10/28/073351
- http://kymst.net/index.php?plugin=attach&refer=diary&openfile=diaryFrN57to.pdf
- https://www.hum.grad.fukuoka-u.ac.jp/news/1396/


* Emacs is dead



- https://qiita.com/akmiyoshi/items/1c19d1484049683b4cec
