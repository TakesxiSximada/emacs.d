#+TITLE: My Emacs configuration files.


This repository is settings for my Emacs.

|--------------------------------+-----------------------------------------------|
| File                           |                                               |
|--------------------------------+-----------------------------------------------|
| ./init.el                      | Remember, the Force will be with you, always. |
| ./themes/sximada-dark-theme.el | That leads to the dark side.                  |
|--------------------------------+-----------------------------------------------|

* Setup

#+begin_example
git clone git@github.com:TakesxiSximada/emacs.d.git ~/.emacs.d
#+end_example

#+BEGIN_EXAMPLE
pip3 install -U --user -r python-mode-requirements.txt
#+END_EXAMPLE

#+BEGIN_EXAMPLE
npm install -g prettier
#+END_EXAMPLE

* 表示

可視性の向上のためカーソル位置の行にアンダーラインを表示し背景色を変更します。

#+begin_src emacs-lisp
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline nil :background "#3f3f4f")
#+end_src

* ウィンドウの分割表示

EmacsにおいてウィンドウはEmacsの画面(フレーム)内に表示されている領域で
す。通常のOSなどでウィンドウと呼ばれている領域はEmacsではフレームと呼
びます。

できる限り文字を多く表示できるようにウィンドウの幅を小さくし線で分割し
ます。モードラインを表示しない場合、上下のウィンドウの境界がわからなく
なってしまうので下側にも分割線を表示するように修正します。

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(setq window-divider-default-bottom-width 1)
(setq window-divider-default-places t)
(window-divider-mode)
#+end_src

* mode-line

モードラインは本当に必要でしょうか？画面上に必要のない情報が表示されて
いることで着が散ってしまいます。最初は無効にし、それぞれの必要性に応じ
て成長させていくこで自分のニーズにあったモードラインに成長していきます。
そのためここでは無効にします。

#+begin_src emacs-lisp
(setq-default mode-line-format nil)
#+end_src

* ウィンドウサイズの変更

#+begin_src emacs-lisp
(bind-key* "s-<up>" (lambda () (interactive) (window-resize nil -1)))
(bind-key* "s-<down>" (lambda () (interactive) (window-resize nil 1)))
(bind-key* "s-<right>" (lambda () (interactive) (window-resize nil 1 t)))
(bind-key* "s-<left>" (lambda () (interactive) (window-resize nil -1 t)))
#+end_src

* Emacsの設定ファイルを素早く開く

Emacsの設定ファイルは開く回数が多いため素早く開けるように独自に関数を定義してキーを割り当てます。

#+begin_src emacs-lisp
(defun open-emacs-init-file ()
  (interactive)
  (expand-file-name "~/.emacs.d/README.org"))

(bind-key* "s-2" #'open-emacs-init-file)
#+end_src

* 追加のキーバインドの設定

#+begin_src emacs-lisp
(require 'org-agenda)

(bind-key* "C-M-i" #'company-complete)
;; (bind-key* "C-c C-c M-x" #'execute-extended-command)
(bind-key* "C-t C-c" #'vterm-command)
(bind-key* "C-t C-o" #'macos-app)
(bind-key* "C-t C-t" #'other-frame)
(bind-key* "C-t C-w" #'editor-create-buffer)
(bind-key* "C-x C-v" #'magit-status)
(bind-key* "M-X" #'smex-major-mode-commands)
(bind-key* "M-i" #'edit-indirect-region)
(bind-key* "M-x" #'smex)
(bind-key* "s-1" #'org-agenda-list)
(bind-key* "s-t" #'make-frame)
#+end_src

* デバッガーの起動コマンドへのエイリアス

Emacsには標準でいくつかのデバッガーが付属していますが、それぞれのツー
ルの名前がそのまま付いています。 =M-x debug-on-XXXX= で全てのデバッガー
を起動できるようにエイリアスを設定しています。

#+begin_src emacs-lisp
(defalias 'debug-on-c 'gdb)
(defalias 'debug-on-java 'jdb)
(defalias 'debug-on-perl 'perldb)
(defalias 'debug-on-python 'pdb)
;; dbx
;; sdb
#+end_src

* 実行ファイルへのパスやその他環境変数の設定

#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "/usr/local/opt/openjdk/bin")
(add-to-list 'exec-path "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin")
(add-to-list 'exec-path "/usr/local/texlive/2021/bin/universal-darwin")  ;; TexLive
(add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
(add-to-list 'exec-path (expand-file-name "~/.emacs.d/whalebrew"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/bin"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/shims"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(add-to-list 'exec-path (expand-file-name "~/.nvm/versions/node/v8.15.0/bin"))
(add-to-list 'exec-path (expand-file-name "~/.poetry/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/Library/Android/sdk/platform-tools"))
(add-to-list 'exec-path (expand-file-name "~/Library/Python/.bin"))
(add-to-list 'exec-path (expand-file-name "~/development/flutter/bin"))
(add-to-list 'exec-path (expand-file-name "~/google-cloud-sdk/bin"))
(add-to-list 'exec-path "/opt/ng/symdon/whalebrew")

(setenv "CPPFLAGS" (string-join '("-I/usr/local/opt/openjdk/include")))
(setenv "LDFLAGS" (string-join '("-L/usr/local/Cellar/openssl@1.1/1.1.1l/lib")))
#+end_src

* CSS

CSS編集のためのタブ幅などを設定します。

#+begin_src emacs-lisp
(require 'css-mode)

(setq css-indent-offset 2)
#+end_src

* [[https://github.com/TakesxiSximada/emacs.d/blob/main/prettier/prettier-buffer.el][prettier-buffer.el]]

フロントエンドのコードフォーマッターとして[[https://github.com/prettier/prettier][prettier]]を用いています。公式
の拡張である[[https://github.com/prettier/prettier-emacs][Prettier-js for Emacs]]もありますが、使用感が合わなかったの
で必要な機能だけを実装しました。

パッケージとして独立させるほどでもなかったため、このリポジトリの =prettier= ディレクトリにファイルを配置しました。
そのためload-pathを追加し、 =prettier-buffer= をrequireします。

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/prettier"))

(require 'prettier-buffer)
#+end_src

実行は =M-x prettier-buffer= で実行できます。

* wakatime

作業時間計測のためのサービス[[https://wakatime.com/dashboard][wakatime]]を利用しています。wakatimeには公式のEmacs拡張があります。

- [[https://wakatime.com/emacs]]
- [[https://melpa.org/#/getting-started]]
- [[https://github.com/wakatime/wakatime-mode]]

公式のEmacs拡張はPython製のwakatimeコマンドを用いてデータを送信する実装となっていました。

プロジェクトやカテゴリーの値はorg-clock-inしているorg-todoの属性から取
得し設定したかったため、Python製のwakatimeコマンドと公式wakatime-modeを使っ
てコマンドを調整しそれらを実現するよりもEmacsから制御したほうが見通し
がよくなると考え自前で実装することにしました。

パッケージとして独立させるほどでもなかったため、このリポジトリの =wakatime= ディレクトリにファイルを配置しました。
そのためload-pathを追加する必要があります。

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/wakatime"))
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-record.el][wakatime-record.el]]

wakatime-record.elは計測した結果をローカルのファイルにキャッシュします。
wakatimeへのデータの送信は行わない。 =(wakatime-record-tunrn-on)= する
ことで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-record)

(wakatime-record-tunrn-on)
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-transport.el][wakatime-transport.el]]

wakatime-transport.elはwakatime-record.elがキャッシュしたデータをwakatimeへ送信します。
=(wakatime-transport-turn-on))= することで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-transport)

(wakatime-transport-turn-on)
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/org-wakatime.el][org-wakatime.el]]

org-modeのプロパティにwakatimeのカテゴリーを登録するための関数を提供しています。
=wakatime-record-get-category= 関数を上書きすることでorg-modeのプロパティからカテゴリーの取得を試みます。
設定されていなければ、メジャーモードからカテゴリーを推測します。

#+begin_src emacs-lisp
(require 'org-wakatime)

(defun wakatime-record-get-category ()
  (interactive)
  (or (org-wakatime-get-category)
      (wakatime-record-get-category-by-major-mode)))
#+end_src

* org-src

コードブロックのインデントや見栄えをカスタマイズします。

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-window-setup 'current-window
    org-src-strip-leading-and-trailing-blank-lines t
    org-src-preserve-indentation t
    org-src-tab-acts-natively nil)
#+end_src

* org-agenda

タスクの管理に =org-agenda= を使用しています。
agendaファイルを追加するには =org-agenda-files= にファイルパスを追加します。

今すべきタスクに集中するため概要では今日のタスクのみを表示します。

#+begin_src emacs-lisp
(setq org-agenda-span 'day)
#+end_src

デフォルトのアジェンダビューはタスクの見積もり時間と所要時間が表示され
ていないためタスクのボリュームを判断できません。そこで見積もり時間と所
要時間を集計する関数を追加しそれを用いてアジェンダビューに表示するよう
に変更します。

#+begin_src emacs-lisp
(require 'org)
(require 'org-clock)

(defun org-clock-get-item-content ()
  (save-excursion
    (let ((start-point (progn (org-back-to-heading t)
			      (point)))
	  (end-point (progn (org-end-of-subtree t t)
			    (point))))
      (buffer-substring-no-properties start-point end-point))))


(defun org-clock-sum-current-item-custom ()
  (interactive)
  (condition-case err-var
      (let* ((content (org-clock-get-item-content))
	     (minute (with-temp-buffer (insert content)
				       (org-clock-sum-current-item))))
	(if (> minute 0)
	    minute
	  ""))
    (error "-")))
#+end_src

アジェンダビューでタスクのタイトルだけではタスクの内容を推測しにくいた
め親のタスクのタイトルも表示します。 =%-10.20b= などの表示を入れること
で親タスクも表示できます。

ここまで用事した機能を用いてアジェンダビューの表示を変更します。

#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . "%4(org-clock-sum-current-item-custom) %4e %t %.8s %-5.5c %-25.50b ")
        (todo . " %i %-12:c %-6e")
        (tags . " %i %-12:c")
        (search . " %i %-12:c")))
#+end_src

アジェンダビューでプロジェクト毎にタスクが固まるようにソート戦略を設定します。

#+begin_src emacs-lisp
(setq org-agenda-sorting-strategy
    '((agenda habit-down time-up category-keep effort-up category-keep priority-down)
      (todo   priority-down category-keep)
      (tags   priority-down category-keep)
      (search category-keep)))
#+end_src

** プロパティを表示する

#+begin_src emacs-lisp
(use-package org-agenda-property :ensure t :defer t)
#+end_src

参考: [[https://blog.symdon.info/posts/1617669052/][org-agendaのday viewでlocationの表示を行う]]

* org-todo

org-todoの論理構造を強制します。
依存しているタスクが存在する場合、それらを完了していないと次のタスクに進めません。

#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
#+end_src

ただしチェックボックスは現在進行中のタスクを阻害してしまうので無効にします。
有効にするには =org-enforce-todo-checkbox-dependencies= を用います。

#+begin_src emacs-lisp
(setq org-enforce-todo-checkbox-dependencies nil)
#+end_src

org-todoの論理構造を視覚的に表示します。
まだ実行の条件を満たさないorg-todoはorg-agendaでグレーアウト表示になります。

#+begin_src emacs-lisp
(setq org-track-ordered-property-with-tag t)
#+end_src

org-todoにはTODOとDONEのステータスがデフォルトで用意されている。
これでは状態の保持には少し足りないが、多すぎるのも操作性を落すことになる。
設定したけれどやらなかったというステータスとしてCANCELを追加する。

#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO"  "|" "DONE" "CANCEL")))
#+end_src

* org-priority

org-modeのタスクの優先度を設定します。

優先度としてA=Zの文字を使います。

#+begin_src emacs-lisp
(setq org-priority-lowest ?Z)
#+end_src

org-mode及びorg-agenda-modeではそれぞれ =M-n= =M-p= を用いて優先度を変更します。

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "M-p") 'org-priority-up)
(define-key org-mode-map (kbd "M-n") 'org-priority-down)
(define-key org-agenda-mode-map (kbd "M-p") 'org-agenda-priority-up)
(define-key org-agenda-mode-map (kbd "M-n") 'org-agenda-priority-down)
#+end_src

* org-babel

org-babelはorg-modeのコードブロックを実行するためのライブラリです。

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (ditaa . t)
   (scheme . t)
   (emacs-lisp . t)
   (python . t)
   (restclient . t)
   (shell . t)
   (sql . t)))
#+end_src


* Databases

各種データベースへの接続設定をします。

** MySQL

#+begin_src emacs-lisp
(setq sql-mysql-program "docker")
(setq sql-mysql-options '("exec" "-ti" "mysqld" "mysql" "mysql"))
(setq sql-mysql-login-params nil)
#+end_src

MySQLのコンテナはSIGINTを送信(C-c C-c)したときに停止しないケースがあり
ます。そのため停止用にDockerで動作させているmysqldに対してSIGTERMを送
信するためのコマンドを定義しています。

#+begin_src emacs-lisp
(defun sql-mysqld-stop ()
  (interactive)
  (let ((vterm-shell "docker kill -s TERM mysqld")
	(vterm-buffer-name "SQL: MySQL: Stop"))
    (vterm)))
#+end_src

** PostgreSQL

#+begin_src emacs-lisp
(setq sql-postgres-program "docker")
(setq sql-postgres-options '("exec" "-ti" "postgres" "psql" "-U" "postgres"))
(setq sql-postgres-login-params nil)
#+end_src

** IBM DB2

私はlocalで使うDB2の環境をDockerを用いて構築しています。
そのためDB2サーバへの接続はコンテナに直接入る方法を採用しました。

sql-db2-programとsql-db2-optionsを設定します。

#+begin_src emacs-lisp
(setq sql-db2-program "docker")
(setq sql-db2-options '("exec" "-ti" "db2-server" "bash" "-c" "su - db2inst1 -c 'db2 -t'"))
#+end_src

DB2は改行でSQLを実行します。その場合複数行にまたがるSQLは改行を削除して実行する必要があります。
=-t= を指定すると改行ではなくセミコロン(;)でSQLを実行するようになります。

接続する前には必ずDB2サーバコンテナを起動しておく必要があります。
起動するためのスクリプトはwhalebrewディレクトリにあります。
[[https://github.com/TakesxiSximada/emacs.d/blob/main/whalebrew/db2-server]]

** Microsonft SQL Server

MSSQL Serverについてはsql-modeでの扱いが難しいです。
[[https://www.emacswiki.org/emacs/SqlMode#h5o-8]]

そこでDocker経由で接続するためのコマンドを別途用意します。

#+begin_src emacs-lisp
(defun sql-docker-ms ()
  (interactive)
  (let ((vterm-shell "docker exec -ti mssql bash -c '/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P ${SA_PASSWORD}'")
	(vterm-buffer-name "SQL: Docker: Microsoft MSSQL Server")
	(vterm-kill-buffer-on-exit nil))
  (vterm)))
#+end_src

** Microsoft SQL Server

#+begin_src emacs-lisp
(setq sql-ms-program "docker")
(setq sql-ms-options '("exec" "-ti" "mssql" "/opt/mssql-tools/bin/sqlcmd"))
(setq sql-ms-login-params '(user server))
#+end_src
" "-S" "localhost" "-U" "SA" "-P" "Testing1234!
(setq sql-server "localhost")
(setq sql-user "SA")
(setq sql-password "Testing1234!")


** Oracle

#+begin_src emacs-lisp
(setq sql-oracle-program "docker")
(setq sql-oracle-options '("exec" "-ti" "oracle" "bash" "-c" "sqlplus sys/testing1234@localhost:1521/ORCLCDB as sysdba"))
(setq sql-oracle-login-params nil)
#+end_src

* 環境固有の設定

環境固有の設定ファイルを読み込みます。

#+begin_src emacs-lisp
(load-file "/opt/ng/symdon/emacs.d/after.el")
#+end_src

* ユーティリティ

ここでは必要に応じて定義した様々な目的の関数を記述します。

** バッファのファイルパスをクリップボードにコピーする

カレントバッファのファイルパスをクリップボードのコピーするコマンドを追加しています。

#+begin_src emacs-lisp
(defun our-buffer-copy-current-file-path ()
  "バッファのファイルパスをクリップボードにコピーする"
  (interactive)
  (let ((path (buffer-file-name)))
    (if path
  	(progn
         (kill-new path)
         (message (format "Copied: %s" path)))
      (message (format "Cannot copied")))))
#+end_src

** face

現在のカーソル位置のface名を表示します。

#+begin_src emacs-lisp
(defun what-face (pos)
  "Display current position face name."
  (interactive "d")
  (if-let ((face-name (get-text-property pos 'face)))
      (message "Face: %s" face-name)))
#+end_src

* AsciiDoc

AsciiDocはマークアップのため記法(Nortation)の一つです。
AsciiDocをEmacsで表示したり編集する場合様々な方法があります。

** adoc-mode

adoc-modeはEmacs上でAsciiDoc形式のファイルを扱うためのメジャーモードです。
しかしデフォルトの設定ではコメントやメタ情報の表示サイズがとても小さくなっています。
これでは編集時に読めないので、ちょうどよい値に設定し直します。

#+begin_src emacs-lisp
(use-package adoc-mode :ensure t :defer t
  :config
  (set-face-attribute markup-comment-face nil :width 'normal :height 1)
  (set-face-attribute markup-meta-face nil :width 'normal :height 1 :foreground "red")
  )
#+end_src

* Font

フォントはSource Han Mono[fn:source-han-mono-repo]をインストールする。

フォントを調節して文字幅が合うようにする。

#+begin_src emacs-lisp
(progn
  (set-face-attribute 'default nil :family "源ノ等幅" :height 120)
  (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "源ノ等幅" :size 16))
  (set-fontset-font nil 'japanese-jisx0208-1978 (font-spec :family "源ノ等幅" :size 16))
  (set-fontset-font nil 'japanese-jisx0212 (font-spec :family "源ノ等幅" :size 16))
  (set-fontset-font nil 'japanese-jisx0213.2004-1 (font-spec :family "源ノ等幅" :size 16))
  (set-fontset-font nil 'jisx0201 (font-spec :family "源ノ等幅" :size 12))
  (set-fontset-font nil 'symbol (font-spec :family "Apple Color Emoji" :size 12))
  (set-fontset-font nil '(?☺ . ?☺) (font-spec :family "Apple Color Emoji" :size 6))
  (set-fontset-font nil '(?🀄 . ?🀈) (font-spec :family "Apple Color Emoji" :size 9))
  (set-fontset-font nil '(?一 . ?一) (font-spec :family "源ノ等幅" :size 12))
  )
#+end_src

| 類似文字 |
|----------|
| l I 1    |
| o O 0    |
| q 9      |
| s S 5    |
| x X      |
| z Z 2    |
| 一 ―     |


| ずれ確認用 半角40字、全角20字            |                    |
|------------------------------------------+--------------------|
| AIfUEaiueoAIUEOaiueoAIUEOaiueoAIUEOaiueo | ASCII英字          |
| 0123456789012345678901234567890123456789 | ASCII数字          |
| ｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵｱｲｳｴｵ | JIS X 0201ｶﾅ       |
| あいうえおあいうえおあいうえおあいうえお | JIS X 0208ひらがな |
| アイウエオアイウエオアイウエオアイウエオ | 同カタカナ         |
| ＡＢＣＤＥＡＢＣＤＥＡＢＣＤＥＡＢＣＤＥ | 同英字             |
| 亜唖娃阿哀亜唖娃阿哀亜唖娃阿哀亜唖娃阿哀 | 同漢字             |
| 𠀋𡈽𡌛𡑮𡢽𠀋𡈽𡌛𡑮𡢽𠀋𡈽𡌛𡑮𡢽𠀋𡈽𡌛𡑮𡢽 | JIS X 0213漢字     |
| 😃😇😍😜😸🙈🐺🐰👽🐉💰🏡🎅🍪🍕🚀🚻💩📷📦 | 絵文字             |
| ☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺                       | 絵文字             |
| 🀄🀅🀆🀇🀈🀄🀅🀆🀇🀈🀄🀅🀆🀇🀈🀄🀅🀆🀇🀈                 | 絵文字             |


(この文字列は https://qiita.com/query1000/items/4b0b8db872adc1a5e2e9V から抜粋)

* [[https://github.com/Fanael/edit-indirect][edit-indirect]]

バッファの一部の領域を別のバッファに移して編集する機能をedit-indirect
を用いて実現しています。edit-indirectでは =C-c C-c= に
=edit-indirect-commit= がバインドされていますが、Org-modeなどの =C-c
C-c= を既に使っているメジャーモードの場合その設定が邪魔になるので無効
化します。

#+begin_src emacs-lisp
(require 'edit-indirect)

(define-key edit-indirect-mode-map (kbd "C-c C-c") nil)
#+end_src

* タスク

タスク実行時の集中力の阻害を最小限にするために、関連する情報以外を見え
ないようにするコマンドを定義します。開始時に =task-join= 、終了時に
=task-leave= を呼び出します。

#+begin_src emacs-lisp
(require 'edit-indirect)
(require 'org-clock)


(defun task-join ()
  "Join the task."
  (interactive)
  (org-narrow-to-subtree)
  (mark-whole-buffer)
  (switch-to-buffer
   (edit-indirect-region
    (region-beginning)
    (region-end)))
  (org-clock-in)
  )

(defun task-leave ()
  "Leave the clock-in task."
  (interactive)
  (if-let ((clock-buf (org-clock-is-active)))
      (with-current-buffer clock-buf
	(org-clock-out)))
  (edit-indirect-commit)
  (widen))
#+end_src

* N

#+begin_src emacs-lisp
(setenv "N_PREFIX" (expand-file-name "~/.local"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
#+end_src

* grip-mode

Org-modeやMarkdownの編集時にはリアルタイムプレビューがあると非常に捗る。
Emacsではgrip-modeを使うことで実現できる。

#+begin_src  emacs-lisp
(use-package grip-mode :ensure t :defer t)
#+end_src

grip-modeは内部でGripというツールを使用している。このGripがリアルタイ
ムレンダリングの機能を提供している。GripはPythonで実装されているので、
pipを用いてインストールする。

#+begin_src bash
pip install grip
#+end_src

参考 :: [[https://blog.symdon.info/posts/1638063555/]]

* org-export

org-exportはorg-mdoeで記述されたファイルを別の形式に変換する。

上付き文字(^で挟む)と下付き文字の記法(_で挟む)は通常の記述で使用するた
め、更に{}の指定が必要になるように設定する。

#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src

参考 :: [[https://blog.symdon.info/posts/1605311844/]]

** OrgファイルをPDFにエクスポート

LaTeXを使ってOrgファイルをPDFにエクスポートする。
org-latex-export-to-pdfが定義されているが、文字コード関連で動作しなかったためコマンドを直接起動する形で独自に実装した。

#+begin_src emacs-lisp
(defun org-pdf-export-to-pdf-via-latex ()
  "Export PDF file from org file via latex"
  (interactive)
  (let* ((tex-file-name (org-latex-export-to-latex))
	 (base-file-name (file-name-base tex-file-name))
	 (dvi-file-name (format "%s.dvi" base-file-name))
	 (pdf-file-name (format "%s.pdf" base-file-name))
	 (vterm-shell (format "bash -c 'platex %s && dvipdfmx %s'"
			      tex-file-name
			      dvi-file-name))
	 (vterm-buffer-name (format "*Org PDF Exporting: %s" pdf-file-name))
	 (vterm-kill-buffer-on-exit nil))
    (vterm)
    pdf-file-name))
#+end_src

* aspell

スペルチェッカー。

http://aspell.net/

#+begin_src emacs-lisp
(setq-default ispell-program-name "aspell")
(with-eval-after-load "ispell"
  (setq ispell-local-dictionary "en_US")
  (add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
#+end_src

aspell自体のインストールは Homebrewの場合 =brew install aspell= を実行する。

* AquaSKK

IMEにはAquaSKKを使用している。aquaskk/keymap.conf を =~/Library/Application Support/AquaSKK/= 配下にコピーする。

* mmm-mode

mmm-modeは1つのバッファ内で複数のメジャーモードを利用できるようにする。
ただしバージョン0.5.8にはvue-modeでファイルを開く時にエラーが発生する既知のバグ[fn:mmm-mode-issue-112]がある。
この問題を回避するにはいくつか方法が示されているが確認したところ以下の関数を評価することで回避できた[fn:mmm-mode-issue-112-wa]。

#+begin_src emacs-lisp
(require 'mmm-region)


(defun mmm-syntax-propertize-function (start stop)
  "Composite function that applies `syntax-table' text properties.
It iterates over all submode regions between START and STOP and
calls each respective submode's `syntax-propertize-function'."
  (let ((saved-mode mmm-current-submode)
        (saved-ovl  mmm-current-overlay))
    (mmm-save-changed-local-variables
     mmm-current-submode mmm-current-overlay)
    (unwind-protect
        (mapc (lambda (elt)
                (let* ((mode (car elt))
                       (func (get mode 'mmm-syntax-propertize-function))
                       (beg (cadr elt)) (end (nth 2 elt))
                       (ovl (nth 3 elt))
                       ;; FIXME: Messing with syntax-ppss-* vars should not
                       ;; be needed any more in Emacs≥26.
                       syntax-ppss-cache
                       syntax-ppss-last)
                  (goto-char beg)
                  (mmm-set-current-pair mode ovl)
                  (mmm-set-local-variables mode mmm-current-overlay)
                  (save-restriction
                    (when mmm-current-overlay
                      (narrow-to-region (overlay-start mmm-current-overlay)
                                        (overlay-end mmm-current-overlay))
                      (put-text-property
                       (point-min) (point-max)
                       'syntax-table (syntax-table)))
                    (cond
                     (func
                      (funcall func beg end))
                     (font-lock-syntactic-keywords
                      (let ((syntax-propertize-function nil))
                        (font-lock-fontify-syntactic-keywords-region beg end))))
                    (run-hook-with-args 'mmm-after-syntax-propertize-functions
                                        mmm-current-overlay mode beg end))))
              (mmm-regions-in start stop))
      (mmm-set-current-pair saved-mode saved-ovl)
      (mmm-set-local-variables (or saved-mode mmm-primary-mode) saved-ovl))))
#+end_src

* リージョンの文字列を置き換えるユーティリティ

=replace-region-contents= をコマンドとして呼び出せるようにし、適応する文字列処理を任意に指定できるようにした。

#+begin_src emacs-lisp
(defun apply-and-replace-region-string (func beg end)
  "Replace after appling function the region string"
  (interactive "a\nr")
  (replace-region-contents
   beg end (lambda ()
	     (let ((txt (buffer-substring-no-properties beg end)))
	       (funcall func txt)))))
#+end_src

リージョンの浮動小数点形式のUNIXエポックタイムを時刻形式に変換する関数を実装した。

#+begin_src emacs-lisp
(defun float-time-to-datetime-string (float-style-string)
  "Convert unix epoc time (floating point style) string to date time formated string."
  (format-time-string
   "%Y-%m-%dT%H:%M:%S.%6N"
   (encode-time (decode-time
		 (string-to-number float-style-string)))))
#+end_src

* EditorConfig

EditorConfigはプロジェクト毎のエディタの設定を統一する。


#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src


* 脚注

[fn:source-han-mono-repo] https://github.com/adobe-fonts/source-han-mono
[fn:mmm-mode-issue-112] [[https://github.com/purcell/mmm-mode/issues/112]]
[fn:mmm-mode-issue-112-wa] [[https://github.com/purcell/mmm-mode/issues/112#issuecomment-751926650]]
