#+TITLE: My Emacs configuration files.


This repository is settings for my Emacs.

|--------------------------------+-----------------------------------------------|
| File                           |                                               |
|--------------------------------+-----------------------------------------------|
| ./init.el                      | Remember, the Force will be with you, always. |
| ./themes/sximada-dark-theme.el | That leads to the dark side.                  |
|--------------------------------+-----------------------------------------------|

* Setup

#+begin_example
git clone git@github.com:TakesxiSximada/emacs.d.git ~/.emacs.d
#+end_example

#+BEGIN_EXAMPLE
pip3 install -U --user -r python-mode-requirements.txt
#+END_EXAMPLE

#+BEGIN_EXAMPLE
npm install -g prettier
#+END_EXAMPLE

* 表示

可視性の向上のためカーソル位置の行にアンダーラインを表示し背景色を変更します。

#+begin_src emacs-lisp
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :underline nil :background "#2f2f3f")
#+end_src

* ウィンドウの分割表示

EmacsにおいてウィンドウはEmacsの画面(フレーム)内に表示されている領域で
す。通常のOSなどでウィンドウと呼ばれている領域はEmacsではフレームと呼
びます。

できる限り文字を多く表示できるようにウィンドウの幅を小さくし線で分割し
ます。モードラインを表示しない場合、上下のウィンドウの境界がわからなく
なってしまうので下側にも分割線を表示するように修正します。

#+begin_src emacs-lisp
(setq window-divider-default-right-width 1)
(setq window-divider-default-bottom-width 1)
(setq window-divider-default-places t)
(window-divider-mode)
#+end_src


* mode-line

モードラインは本当に必要でしょうか？画面上に必要のない情報が表示されて
いることで着が散ってしまいます。最初は無効にし、それぞれの必要性に応じ
て成長させていくこで自分のニーズにあったモードラインに成長していきます。
そのためここでは無効にします。

#+begin_src emacs-lisp
(setq-default mode-line-format nil)
#+end_src

* 追加のキーバインドの設定

#+begin_src emacs-lisp
(require 'org-agenda)

(bind-key* "C-M-i" #'company-complete)
;; (bind-key* "C-c C-c M-x" #'execute-extended-command)
(bind-key* "C-t C-c" #'vterm-command)
(bind-key* "C-t C-o" #'macos-app)
(bind-key* "C-t C-t" #'other-frame)
(bind-key* "C-t C-w" #'editor-create-buffer)
(bind-key* "C-x C-v" #'magit-status)
(bind-key* "M-X" #'smex-major-mode-commands)
(bind-key* "M-i" #'edit-indirect-region)
(bind-key* "M-x" #'smex)
(bind-key* "s-1" #'org-agenda-list)
(bind-key* "s-t" #'make-frame)
#+end_src

* デバッガーの起動コマンドへのエイリアス

Emacsには標準でいくつかのデバッガーが付属していますが、それぞれのツー
ルの名前がそのまま付いています。 =M-x debug-on-XXXX= で全てのデバッガー
を起動できるようにエイリアスを設定しています。

#+begin_src emacs-lisp
(defalias 'debug-on-c 'gdb)
(defalias 'debug-on-java 'jdb)
(defalias 'debug-on-perl 'perldb)
(defalias 'debug-on-python 'pdb)
;; dbx
;; sdb
#+end_src

* バッファのファイルパスをクリップボードにコピーする

カレントバッファのファイルパスをクリップボードのコピーするコマンドを追加しています。

#+begin_src emacs-lisp
(defun our-buffer-copy-current-file-path ()
  "バッファのファイルパスをクリップボードにコピーする"
  (interactive)
  (let ((path (buffer-file-name)))
    (if path
  	(progn
         (kill-new path)
         (message (format "Copied: %s" path)))
      (message (format "Cannot copied")))))
#+end_src

* 実行ファイルへのパスやその他環境変数の設定

#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "/usr/local/opt/openjdk/bin")
(add-to-list 'exec-path "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin")
(add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
(add-to-list 'exec-path (expand-file-name "~/.emacs.d/whalebrew"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/bin"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/shims"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(add-to-list 'exec-path (expand-file-name "~/.nvm/versions/node/v8.15.0/bin"))
(add-to-list 'exec-path (expand-file-name "~/.poetry/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/Library/Python/.bin"))
(add-to-list 'exec-path (expand-file-name "~/development/flutter/bin"))
(add-to-list 'exec-path (expand-file-name "~/google-cloud-sdk/bin"))
(add-to-list 'exec-path "/opt/ng/symdon/whalebrew")
(setenv "PATH" (string-join exec-path ":"))

(setenv "CPPFLAGS" (string-join '("-I/usr/local/opt/openjdk/include")))
#+end_src

* CSS

CSS編集のためのタブ幅などを設定します。

#+begin_src emacs-lisp
(require 'css-mode)

(setq css-indent-offset 2)
#+end_src

* [[https://github.com/TakesxiSximada/emacs.d/blob/main/prettier/prettier-buffer.el][prettier-buffer.el]]

フロントエンドのコードフォーマッターとして[[https://github.com/prettier/prettier][prettier]]を用いています。公式
の拡張である[[https://github.com/prettier/prettier-emacs][Prettier-js for Emacs]]もありますが、使用感が合わなかったの
で必要な機能だけを実装しました。

パッケージとして独立させるほどでもなかったため、このリポジトリの =prettier= ディレクトリにファイルを配置しました。
そのためload-pathを追加し、 =prettier-buffer= をrequireします。

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/prettier"))

(require 'prettier-buffer)
#+end_src

実行は =M-x prettier-buffer= で実行できます。

* wakatime

作業時間計測のためのサービス[[https://wakatime.com/dashboard][wakatime]]を利用しています。wakatimeには公式のEmacs拡張があります。

- [[https://wakatime.com/emacs]]
- [[https://melpa.org/#/getting-started]]
- [[https://github.com/wakatime/wakatime-mode]]

公式のEmacs拡張はPython製のwakatimeコマンドを用いてデータを送信する実装となっていました。

プロジェクトやカテゴリーの値はorg-clock-inしているorg-todoの属性から取
得し設定したかったため、Python製のwakatimeコマンドと公式wakatime-modeを使っ
てコマンドを調整しそれらを実現するよりもEmacsから制御したほうが見通し
がよくなると考え自前で実装することにしました。

パッケージとして独立させるほどでもなかったため、このリポジトリの =wakatime= ディレクトリにファイルを配置しました。
そのためload-pathを追加する必要があります。

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/wakatime"))
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-record.el][wakatime-record.el]]

wakatime-record.elは計測した結果をローカルのファイルにキャッシュします。
wakatimeへのデータの送信は行わない。 =(wakatime-record-tunrn-on)= する
ことで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-record)

(wakatime-record-tunrn-on)
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-transport.el][wakatime-transport.el]]

wakatime-transport.elはwakatime-record.elがキャッシュしたデータをwakatimeへ送信します。
=(wakatime-transport-turn-on))= することで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-transport)

(wakatime-transport-turn-on)
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/org-wakatime.el][org-wakatime.el]]

org-modeのプロパティにwakatimeのカテゴリーを登録するための関数を提供しています。
=wakatime-record-get-category= 関数を上書きすることでorg-modeのプロパティからカテゴリーの取得を試みます。
設定されていなければ、メジャーモードからカテゴリーを推測します。

#+begin_src emacs-lisp
(require 'org-wakatime)

(defun wakatime-record-get-category ()
  (interactive)
  (or (org-wakatime-get-category)
      (wakatime-record-get-category-by-major-mode)))
#+end_src

* org-src

コードブロックのインデントや見栄えをカスタマイズします。

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
    org-src-window-setup 'current-window
    org-src-strip-leading-and-trailing-blank-lines t
    org-src-preserve-indentation t
    org-src-tab-acts-natively nil)
#+end_src

* org-agenda

タスクの管理に =org-agenda= を使用しています。agendaファイルを追加します。

#+begin_src emacs-lisp
(add-to-list 'org-agenda-files (expand-file-name "~/.emacs.d/PROJECT.org"))
#+end_src

今すべきタスクに集中するため概要では今日のタスクのみを表示します。

#+begin_src emacs-lisp
(setq org-agenda-span 'day)
#+end_src

デフォルトのアジェンダビューはタスクの見積もり時間と所要時間が表示され
ていないためタスクのボリュームを判断できません。そこで見積もり時間と所
要時間を集計する関数を追加しそれを用いてアジェンダビューに表示するよう
に変更します。

#+begin_src emacs-lisp
(require 'org)
(require 'org-clock)

(defun org-clock-get-item-content ()
  (save-excursion
    (let ((start-point (progn (org-back-to-heading t)
			      (point)))
	  (end-point (progn (org-end-of-subtree t t)
			    (point))))
      (buffer-substring-no-properties start-point end-point))))


(defun org-clock-sum-current-item-custom ()
  (interactive)
  (condition-case err-var
      (let* ((content (org-clock-get-item-content))
	     (minute (with-temp-buffer (insert content)
				       (org-clock-sum-current-item))))
	(if (> minute 0)
	    minute
	  ""))
    (error "-")))
#+end_src

アジェンダビューでタスクのタイトルだけではタスクの内容を推測しにくいた
め親のタスクのタイトルも表示します。 =%-10.20b= などの表示を入れること
で親タスクも表示できます。

ここまで用事した機能を用いてアジェンダビューの表示を変更します。

#+begin_src emacs-lisp
(setq org-agenda-prefix-format
      '((agenda . " %4(org-clock-sum-current-item-custom) %4e %.8s %-4.4c %-25.50b ")
        (todo . " %i %-12:c %-6e")
        (tags . " %i %-12:c")
        (search . " %i %-12:c")))
#+end_src


* Databases

各種データベースへの接続設定をします。

** IBM DB2

私はlocalで使うDB2の環境をDockerを用いて構築しています。
そのためDB2サーバへの接続はコンテナに直接入る方法を採用しました。

sql-db2-programとsql-db2-optionsを設定します。

#+begin_src emacs-lisp
(setq sql-db2-program "docker")
(setq sql-db2-options '("exec" "-ti" "db2-server" "bash" "-c" "su - db2inst1 -c 'db2 -t'"))
#+end_src

DB2は改行でSQLを実行します。その場合複数行にまたがるSQLは改行を削除して実行する必要があります。
=-t= を指定すると改行ではなくセミコロン(;)でSQLを実行するようになります。

接続する前には必ずDB2サーバコンテナを起動しておく必要があります。
起動するためのスクリプトはwhalebrewディレクトリにあります。
[[https://github.com/TakesxiSximada/emacs.d/blob/main/whalebrew/db2-server]]


* 環境固有の設定

環境固有の設定ファイルを読み込みます。

#+begin_src emacs-lisp
(load-file "/opt/ng/symdon/emacs.d/after.el")
#+end_src
