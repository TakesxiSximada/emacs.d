#+TITLE: My Emacs configuration files.


This repository is settings for my Emacs.

|--------------------------------+-----------------------------------------------|
| File                           |                                               |
|--------------------------------+-----------------------------------------------|
| ./init.el                      | Remember, the Force will be with you, always. |
| ./themes/sximada-dark-theme.el | That leads to the dark side.                  |
|--------------------------------+-----------------------------------------------|

* Setup

#+BEGIN_EXAMPLE
pip3 install -U --user -r python-mode-requirements.txt
#+END_EXAMPLE

#+BEGIN_EXAMPLE
npm install -g prettier
#+END_EXAMPLE

* 追加のキーバインドの設定

#+begin_src emacs-lisp
(bind-key* "C-M-i" #'company-complete)
(bind-key* "M-i" #'edit-indirect-region)
(bind-key* "M-x" #'smex)
(bind-key* "M-X" #'smex-major-mode-commands)
;; (bind-key* "C-c C-c M-x" #'execute-extended-command)
(bind-key* "C-x C-v" #'magit-status)
(bind-key* "C-t C-c" #'vterm-command)
(bind-key* "C-t C-w" #'editor-create-buffer)

(bind-key* "s-t" #'make-frame)
(bind-key* "C-t C-t" #'other-frame)
(bind-key* "C-t C-o" #'macos-app)
#+end_src

* デバッガーの起動コマンドへのエイリアス

Emacsには標準でいくつかのデバッガーが付属していますが、それぞれのツー
ルの名前がそのまま付いています。 =M-x debug-on-XXXX= で全てのデバッガー
を起動できるようにエイリアスを設定しています。

#+begin_src emacs-lisp
(defalias 'debug-on-c 'gdb)
(defalias 'debug-on-java 'jdb)
(defalias 'debug-on-perl 'perldb)
(defalias 'debug-on-python 'pdb)
;; dbx
;; sdb
#+end_src

* バッファのファイルパスをクリップボードにコピーする

カレントバッファのファイルパスをクリップボードのコピーするコマンドを追加しています。

#+begin_src emacs-lisp
(defun our-buffer-copy-current-file-path ()
  "バッファのファイルパスをクリップボードにコピーする"
  (interactive)
  (let ((path (buffer-file-name)))
    (if path
  	(progn
          (kill-new path)
          (message (format "Copied: %s" path)))
      (message (format "Cannot copied")))))
#+end_src

* 実行ファイルへのパスやその他環境変数の設定

#+begin_src emacs-lisp
(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path "/usr/local/opt/openjdk/bin")
(add-to-list 'exec-path "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin")
(add-to-list 'exec-path (expand-file-name "~/.cargo/bin"))
(add-to-list 'exec-path (expand-file-name "~/.emacs.d/whalebrew"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/bin"))
(add-to-list 'exec-path (expand-file-name "~/.goenv/shims"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(add-to-list 'exec-path (expand-file-name "~/.nvm/versions/node/v8.15.0/bin"))
(add-to-list 'exec-path (expand-file-name "~/.poetry/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/.whalebrew-bin/bin"))
(add-to-list 'exec-path (expand-file-name "~/Library/Python/.bin"))
(add-to-list 'exec-path (expand-file-name "~/development/flutter/bin"))
(add-to-list 'exec-path (expand-file-name "~/google-cloud-sdk/bin"))
(add-to-list 'exec-path "/opt/ng/symdon/whalebrew")
(setenv "PATH" (string-join exec-path ":"))

(setenv "CPPFLAGS" (string-join '("-I/usr/local/opt/openjdk/include")))
#+end_src

* wakatime

作業時間計測のためのサービス[[https://wakatime.com/dashboard][wakatime]]を利用しています。wakatimeには公式のEmacs拡張があります。

- [[https://wakatime.com/emacs]]
- [[https://melpa.org/#/getting-started]]
- [[https://github.com/wakatime/wakatime-mode]]

公式のEmacs拡張はPython製のwakatimeコマンドを用いてデータを送信する実装となっていました。

プロジェクトやカテゴリーの値はorg-clock-inしているorg-todoの属性から取
得し設定したかったため、Python製のwakatimeコマンドと公式wakatime-modeを使っ
てコマンドを調整しそれらを実現するよりもEmacsから制御したほうが見通し
がよくなると考え自前で実装することにしました。

パッケージとして独立させるほどでもなかったため、このリポジトリの =wakatime= ディレクトリにファイルを配置しました。
そのためload-pathを追加する必要があります。

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/wakatime"))
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-record.el][wakatime-record.el]]

wakatime-record.elは計測した結果をローカルのファイルにキャッシュします。
wakatimeへのデータの送信は行わない。 =(wakatime-record-tunrn-on)= する
ことで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-record)

(wakatime-record-tunrn-on)
#+end_src

** [[https://github.com/TakesxiSximada/emacs.d/blob/main/wakatime/wakatime-transport.el][wakatime-transport.el]]

wakatime-transport.elはwakatime-record.elがキャッシュしたデータをwakatimeへ送信します。
=(wakatime-transport-turn-on))= することで有効になります。

#+begin_src emacs-lisp
(require 'wakatime-transport)

(wakatime-transport-tunrn-on)
#+end_src

* 環境固有の設定

環境固有の設定ファイルを読み込みます。

#+begin_src emacs-lisp
(load-file "/opt/ng/symdon/emacs.d/after.el")
#+end_src
