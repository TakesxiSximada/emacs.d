#!/usr/bin/env python3
"""Refresh  Gmail API OAuth2 Access token.

                               /T /I
                              / |/ | .-~/
                          T\ Y  I  |/  /  _
         /T               | \I  |  I  Y.-~/
        I l   /I       T\ |  |  l  |  T  /
 __  | \l   \l  \I l __l  l   \   `  _. |
 \ ~-l  `\   `\  \  \\ ~\  \   `. .-~   |
  \   ~-. "-.  `  \  ^._ ^. "-.  /  \   |
.--~-._  ~-  `  _  ~-_.-"-." ._ /._ ." ./
 >--.  ~-.   ._  ~>-"    "\\   7   7   ]
^.___~"--._    ~-{  .-~ .  `\ Y . /    |
 <__ ~"-.  ~       /_/   \   \I  Y   : |
   ^-.__           ~(_/   \   >._:   | l______
       ^--.,___.-~"  /_/   !  `-.~"--l_ /     ~"-.
              (_/ .  ~(   /'     "~"--,Y   -=b-. _)
               (_/ .  \  :           / l      c"~o \
                \ /    `.    .     .^   \_.-~"~--.  )
                 (_/ .   `  /     /       !       )/
                  / / _.   '.   .':      /        '
                  ~(_/ .   /    _  `  .-<_      -Row
                    /_/ . ' .-~" `.  / \  \          ,z=.
                    ~( /   '  :   | K   "-.~-.______//
                      "-,.    l   I/ \_    __{--->._(==.
                       //(     \  <    ~"~"     //
                      /' /\     \  \     ,v=.  ((
                    .^. / /\     "  }__ //===-  `
                   / / ' '  "-.,__ {---(==-
                 .^ '       :  T  ~"   ll
                / .  .  . : | :!        \\
               (_/  /   | | j-"          ~^
                 ~-<_(_.^-~"  https://www.asciiart.eu/animals/birds-land

gsendmail-refresh refresh access token of gmail api.  Get refresh
token from macOS Keychain, Refresh access token using it, Save to
keychain again.

Copyright (C) 2022 TakesxiSximada

This file is part of gsendmail-refresh.

gsendmail-refresh is free software: you can redistribute it and/or
modify it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

gsendmail-refresh is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<https://www.gnu.org/licenses/>.
"""
import json
import os
import subprocess
import sys
from argparse import ArgumentParser
from urllib.parse import urlencode
from urllib.request import Request, urlopen

CONFIG_FILE_PATH = "~/.config/gsendmail/config.json"

parser = ArgumentParser()
parser.add_argument("account")
args = parser.parse_args()

get_refresh_token_cmd = (
    "security",
    "find-generic-password",
    "-s",
    "gsendmail.oauth2.refresh_token",
    "-a",
    args.account,
    "-w",
)

proc = subprocess.run(get_refresh_token_cmd, capture_output=True, text=True, check=True)
if proc.stdout:
    refresh_token = proc.stdout.strip()

with open(CONFIG_FILE_PATH) as fp:
    config = json.load(fp)

target = next(filter(lambda x: x.get("account") == args.account, config))
if not target:
    print("No account")
    sys.exit(1)

req_data = urlencode(
    {
        "client_id": target["client_id"],
        "client_secret": target["client_secret"],
        "redirect_uri": "urn:ietf:wg:oauth:2.0:oob",
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
    }
).encode()
req = Request(
    "https://oauth2.googleapis.com/token",
    data=req_data,
    headers={
        "Content-Type": "application/x-www-form-urlencoded",
    },
    method="POST",
)
with urlopen(req) as res:
    if res.status != 200:
        print("Failed to refresh access token!!")
        print(res.read().decode())
        sys.exit(1)

    resp_data = json.load(res)

new_access_token = resp_data["access_token"]
save_access_token_cmd = (
    "security",
    "add-generic-password",
    "-U",
    "-s",
    "gsendmail.oauth2.access_token",
    "-a",
    args.account,
    "-w",
    new_access_token,
)
proc = subprocess.run(save_access_token_cmd, capture_output=True, text=True, check=True)
