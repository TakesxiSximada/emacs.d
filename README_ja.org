#+TITLE: Emacsの設定

[[README.org][en]] | [[README_ja.org][ja]]

このリポジトリでは、私自身の個人的なGNU Emacsについてのメモ書きや設定を管理する。

[[https://res.cloudinary.com/symdon/image/upload/v1645157040/demo_spyojf.gif]]

* Emacsとは

Emacsはテキストエディタ、つまりテキストファイルを編集するためのソフトウェアであり、文章やプログラムを書くために使われる。

同種のソフトウェアとしては、vi、vim、neovim、nano、VSCode、Sublime Text、Cursor、秀丸エディタ、メモ帳、サクラエディタなどが上げられる。それぞれに特徴と、できる事やできない事がある。

* Emacsを選ぶ理由

さまざまなテキストエディタがある中で、筆者が好んでEmacsを使う理由を書く。これがテキストエディタを選ぶ際の観点の一つとして、誰かの役に立つと嬉しい。

** 広く柔軟な拡張性

Emacsは拡張性に優れており、自分好みのEmacsに育てていく事ができる。他のテキストエディタもある程度の拡張性を持っているが、その拡張できる範囲というものは大きく異なり、Emacsはこの拡張できる範囲がとても広い。また作成した拡張を使う方法も他のエディタとは異なる。まるでプレイグラウンドを操作しているように、拡張を即座に反映、確認できます。再起動した時にも反映したければファイルに保存すればいいが、その場かぎりの拡張で良いのであればファイルに保存する必要すらない。ただ拡張として書いたEmacs Lispを評価すればいい。

** 柔軟な拡張言語であるEmacs Lisp

この広くて柔軟な拡張性は、Emacsの拡張に使用するEmacs Lispというプログラミング言語に由来するものと言えるでしょう。Emacs LispはLisp言語の方言の1つです。Lisp言語には他の言語にはない優れている点が様々ありますが内容が多すぎるためここでは割愛します。

Emacsは、Emacs Lispというプログラミング言語の完全な処理系と考える事ができます。このEmacs Lispは一般的にはあまり良い評価を得ていません。原始的な名前空間しかなく、ほとんどグローバルな変数や関数としてありとあらゆる所から参照可能です。その変わりバッファローカルといったEmacs固有の概念もあり、他のプログラミング言語の経験者から見ると異様に感じられるでしょう。Emacsは基本的に単一スレッドで動作しており、うっかり時間のかかる処理をEmacs Lispで実行してしまうと、Emacs自体がフリーズしユーザーからの入力を受け付けなくなります。それではEmacsでスレッドを作り、そのスレッドで実行すればいいのではと考えるかもしれませんが、時間のかかる処理を子スレッドで実行したとしても、EmacsにはGILがあるためやっぱりEmacs自体がフリーズしユーザーからの入力を受け付けなくなってしまいます。またEmacs Lispはインタプリタ方式の動的型付のプログラミング言語であり、他の同種のプログラミング言語と比較しても遅いです。

Emacs Lispのデメリットは多々ありますが、ここで取り上げた(ほとんど制約のない)名前空間の扱いは、気軽にLispを書き評価し挙動を変更していくというスタイルに向いています。堅牢で完全なシステムを作るには不利で混乱の元になるようなこれらの特徴も、自分のためだけのツールを即座に書いたり、その場だけの用途で特定の処理を無理矢理変更するなど、日常生活で発生する小さなニーズを満たすためには利点となるのです。

** 自分の歩幅に合わせて成長するEmacs

Emacs Lispのこれらのプログラミング言語としての貧弱さも、そのような特徴だからこそEmacs Lispで全てを実装するのではなく、外部プロセスを利用し外の世界と協調する事で機能を実現する事を良しとする考えもあります。そのような考えの元では、Emacs以外の知識を利用する事になり、その知識の深さの分だけできる事が増えます。

自分にできる事はEmacsの得意とする部分によって柔軟に強化でき、自分にできない事はEmacsを使ってもできません。つまり自分自身の成長の歩幅に合わせてEmacsも成長していきます。自分と共に成長してくれる相棒、それがEmacsであり、私がEmacsを使う理由です。

* セットアップ

Emacsをインストールし、この設定を使う方法について説明します。

1. GNU Emacsをインストールします。

   公式のインストール方法は https://www.gnu.org/software/emacs/download.html を参照してください。または自分でビルドする事もできます。自分でビルドする場合は「セルフビルド」の節を参照してください。

2. 設定ファイルをダウンロードします。

   #+begin_src
   git clone https://github.com/TakesxiSximada/.emacs.d.git ~/.emacs.d
   #+end_src

3. GNU Emacsを起動します。

   GNU Emacsのアプリケーションを起動します。環境によって起動方法は異なりますが =emacs= や =emacs -nw= 、macOSであれば =open /Applications/Emacs.app= などで起動できるでしょう。もちろん、Emacsのアプリケーションのアイコンをダブルクリックでも起動するでしょう。

* セルフビルド

公式のGNU Emacsディストリビューションには、いくつかの機能が無効になっています。これらの機能を有効にするには、自分でアプリケーションをビルドする必要があります。以下は、macOS向けにビルドするための手順です。

1. 依存するツールをインストールする。

   #+caption: Homebrewを使って依存するツールをインストールする。
   #+begin_src bash
   brew install \
        autoconf \
        texinfo \
        imagemagick \
        gnutls
   #+end_src

2. GNU Emacsのソースコードをダウンロードする。

   #+caption: SavannahからGNU Emacsのソースコードをダウンロードする。
   #+begin_src bash
   git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git
   #+end_src

3. ソースツリーのルートディレクトリに作業ディレクトリを移動する。

   #+begin_src bash
   cd emacs
   #+end_src

4. autogenスクリプトを実行しconfigureスクリプトを生成する。

   #+begin_src bash
   ./autogen.sh
   #+end_src

5. configureスクリプトを実行しビルドに必要なMakefileなどの各種ファイルを生成する。この時、有効にする機能をオプションとして指定する。

   #+begin_src bash
   ./configure \
      --with-imagemagick \
      --with-mailutils \
      --with-modules \
      --with-ns \
      --with-pop \
      --with-xwidgets \
      --x-includes=/opt/X11/include \
      --x-libraries=/opt/X11/lib \
      --with-x
   #+end_src

4. Cで実装されたコードをビルドする。

   #+begin_src
   make
   #+end_src

5. macOS用のアプリケーションバンドルを生成する。これによりEmacs Lispで実装されたコードも同梱される。

   #+begin_src
   make install
   #+end_src

6. アプリケーションを/Applications配下のディレクトリに移動する。

   #+begin_src
   sudo mv nextstep/Emacs.app /Applications
   #+end_src

* モダンに設定されたEmacs

Emacsの初期状態はあまり使いやすい状態にはなっておらず、自分なりの設定を加えていく事により大きく使用感が変わる。このEmacsを育てていく作業は長い時間をかけゆっくり行うようなものであるため、Emacsの初心者にとってはハードルが高い。

そこで初期の状態でも使いやすいように調整された設定を配布しているグループがある。それらの設定はスターターキット、ディストリビューション、コンフィギュレーションフレームワーク等とと呼ばれたりする。この文書ではスターターキットと表現する。
スターターキットの中で人気のあるものとして =spacemacs= と =Doom Emacs= が挙げられる。

- spacemacs https://www.spacemacs.org

  spacemacsはEmacsとVimの両方の操作感を上手く扱えるエディタ環境を提供する事を主なコンセプトにしている。また洗練された設定により、ほぼ初期状態でもモダンなエディタとして使用できる。

- Doom Emacs https://docs.doomemacs.org

  Doom Emacsは再現性のあるパッケージ管理を提供する。モダン化した方がよい部分は最小限の設定をし、独自の仕組みが小さくなるように作られている。また公式ドキュメントが詩的で趣深い。

これらのスターターキットを使わないEmacsは、バニラEmacsと呼ばれる事がある。スターターキットを使用する場合、Emacsに加えてスターターキット自体の作法を学ぶ必要がある。バニラEmacsを好む人達は、そういった追加で必要な学習を避け、構成要素が増える事によって複雑になる事を回避する傾向があるように思う。

私自身もバニラEmacsを好む。自分の身の丈に合ったものを使う事で、「何がなんだかよくわからない」という状況を避けたいからだ。ただしそれらは程度問題でもあるので、そういったものを全て使わないというわけでもない。

普段はバニラEmacsを使い、必要に応じてspacemacs化したりDoom Emacs化する事を私は好む。スターターキットはあくまでEmacsの設定であるため、起動の設定を工夫する事で任意のタイミングでバニラEmacsをspacemacsやDoom Emacsに変身させる事はできる。ただしこの処理はあくまで一方向であり、元に戻すためにはEmacsの再起動が必要になる。

* Emacsについて文書の記事

Emacsには長い歴史があり、今もコミュニティによって開発が続けらている。そのため根強いファンが世界中に存在し、自らのEmacsについての考えをさまざまな形式で文章にしているファンもいる。内容も多岐に渡り、技術的なメモであったり、主観的であったり、個人的な事柄を含む事もある。

それはその人達が何かしらの仕事に取り組んだ足跡であり、それぞれの考え方を伝えようとしているように思う。私はそのような文章を、短編小説を楽しむように読んでいる。それぞれの文章の著者達の人間味を感じる事ができる。フィクションである事もあるけれど、そんな事はどうでもいい事だと思う。どの作品であれ、そこにはEmacsを大切にする気持ちが溢れている。

ここではそのようなEmacsの文章を記録していく。

- https://qiita.com/sylx/items/46bc993471cd71980aa5
- https://www.itmedia.co.jp/enterprise/articles/0706/26/news003_2.html
- https://gntm-mdk.hatenadiary.com/entry/2016/10/28/073351
- http://kymst.net/index.php?plugin=attach&refer=diary&openfile=diaryFrN57to.pdf
- https://www.hum.grad.fukuoka-u.ac.jp/news/1396/
- https://tomoya.hatenadiary.org/entry/20120327/1332792017
- https://anond.hatelabo.jp/20250203103447
- https://qiita.com/akmiyoshi/items/1c19d1484049683b4cec
