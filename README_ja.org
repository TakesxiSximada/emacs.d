#+TITLE: GNU Emacsの設定

[[README.org][en]] | [[README_ja.org][ja]]

このリポジトリでは、Emacsの個人的な設定とカスタマイズを管理している。

[[https://res.cloudinary.com/symdon/image/upload/v1645157040/demo_spyojf.gif]]

* リポジトリの目的

このリポジトリは、次の方針で開発および保守をしています。

- 自分の成長に合わせ、柔軟な環境を作る。

  自分の能力に合わせて成長するように、設定を少しずつ改善し、やりたい事に対して柔軟に対応できる環境を作る事を目的としている。理解できた事を取り込んで、必要な機能を作っている。前提知識がなくても中で何が起きているのかが分かるようにする事を意識している。また履歴を保全する事で、長い期間での成長をトラッキングできるようにしている。

- 複数の環境で一貫した使いやすさを提供する。

  インターネットさえあればいつでも同じ快適な環境を再現でき、力を発揮し続けられるような仕組みを作る事を目的としている。何もなくなってしまっても、環境の再構築が容易な仕組みにしたい。さまざまな場所や端末を使う事を想定している。

- 他のEmacユーザーへの情報共有。

  Emacsのカスタマイズは少しずつ長期的に行う作業となる。満足の行くようになるまでに何年もかかるだろう。そして人それぞれに異なるニーズがあり、そのニーズに応じたカスタマイズができるため、決められた手順などはなく、手順を追うような教材もない。ただし参考となるようなコードがあれば、自分と同じようにEmacsの環境をカスタマイズする人達の手助けにはなるだろう。そのような参考資料となる事を目的としている。

* Emacsを選んだ理由

さまざまなテキストエディタがある中で、筆者が好んでEmacsを使う理由を書く。これがテキストエディタを選ぶ際の観点の一つとして、誰かの役に立つと嬉しい。

** 広く柔軟な拡張性

Emacsは拡張性に優れており、自分好みのEmacsに育てていく事ができる。他のテキストエディタもある程度の拡張性を持っているが、その拡張できる範囲というものは大きく異なり、Emacsはこの拡張できる範囲がとても広い。また作成した拡張を使う方法も他のエディタとは異なる。まるでプレイグラウンドを操作しているように、拡張を即座に反映、確認できます。再起動した時にも反映したければファイルに保存すればいいが、その場かぎりの拡張で良いのであればファイルに保存する必要すらない。ただ拡張として書いたEmacs Lispを評価すればいい。

** 柔軟な拡張言語であるEmacs Lisp

この広くて柔軟な拡張性は、Emacsの拡張に使用するEmacs Lispというプログラミング言語に由来するものと言えるでしょう。Emacs LispはLisp言語の方言の1つです。Lisp言語には他の言語にはない優れている点が様々ありますが内容が多すぎるためここでは割愛します。

Emacsは、Emacs Lispというプログラミング言語の完全な処理系と考える事ができます。このEmacs Lispは一般的にはあまり良い評価を得ていません。原始的な名前空間しかなく、ほとんどグローバルな変数や関数としてありとあらゆる所から参照可能です。その変わりバッファローカルといったEmacs固有の概念もあり、他のプログラミング言語の経験者から見ると異様に感じられるでしょう。Emacsは基本的に単一スレッドで動作しており、うっかり時間のかかる処理をEmacs Lispで実行してしまうと、Emacs自体がフリーズしユーザーからの入力を受け付けなくなります。それではEmacsでスレッドを作り、そのスレッドで実行すればいいのではと考えるかもしれませんが、時間のかかる処理を子スレッドで実行したとしても、EmacsにはGILがあるためやっぱりEmacs自体がフリーズしユーザーからの入力を受け付けなくなってしまいます。またEmacs Lispはインタプリタ方式の動的型付のプログラミング言語であり、他の同種のプログラミング言語と比較しても遅いです。

Emacs Lispのデメリットは多々ありますが、ここで取り上げた(ほとんど制約のない)名前空間の扱いは、気軽にLispを書き評価し挙動を変更していくというスタイルに向いています。堅牢で完全なシステムを作るには不利で混乱の元になるようなこれらの特徴も、自分のためだけのツールを即座に書いたり、その場だけの用途で特定の処理を無理矢理変更するなど、日常生活で発生する小さなニーズを満たすためには利点となるのです。

** 自分の歩幅に合わせて成長するEmacs

Emacs Lispのこれらのプログラミング言語としての貧弱さも、そのような特徴だからこそEmacs Lispで全てを実装するのではなく、外部プロセスを利用し外の世界と協調する事で機能を実現する事を良しとする考えもあります。そのような考えの元では、Emacs以外の知識を利用する事になり、その知識の深さの分だけできる事が増えます。

自分にできる事はEmacsの得意とする部分によって柔軟に強化でき、自分にできない事はEmacsを使ってもできません。つまり自分自身の成長の歩幅に合わせてEmacsも成長していきます。自分と共に成長してくれる相棒、それがEmacsであり、私がEmacsを使う理由です。

* セットアップ

Emacsをインストールし、この設定を使う方法について説明します。

1. GNU Emacsをインストールします。

   公式のインストール方法は https://www.gnu.org/software/emacs/download.html を参照してください。または自分でビルドする事もできます。自分でビルドする場合は「セルフビルド」の節を参照してください。

2. 設定ファイルをダウンロードします。

   #+begin_src
   git clone https://github.com/TakesxiSximada/emacs.d.git ~/.emacs.d
   #+end_src

3. GNU Emacsを起動します。

   GNU Emacsのアプリケーションを起動します。環境によって起動方法は異なりますが =emacs= や =emacs -nw= 、macOSであれば =open /Applications/Emacs.app= などで起動できるでしょう。もちろん、Emacsのアプリケーションのアイコンをダブルクリックでも起動するでしょう。

* セルフビルド

公式のGNU Emacsディストリビューションには、いくつかの機能が無効になっています。これらの機能を有効にするには、自分でアプリケーションをビルドする必要があります。以下は、macOS向けにビルドするための手順です。

1. 依存するツールをインストールする。

   #+caption: Homebrewを使って依存するツールをインストールする。
   #+begin_src bash
   brew install \
        autoconf \
        texinfo \
        imagemagick \
        gnutls
   #+end_src

2. GNU Emacsのソースコードをダウンロードする。

   #+caption: SavannahからGNU Emacsのソースコードをダウンロードする。
   #+begin_src bash
   git clone --depth 1 https://git.savannah.gnu.org/git/emacs.git
   #+end_src

3. ソースツリーのルートディレクトリに作業ディレクトリを移動する。

   #+begin_src bash
   cd emacs
   #+end_src

4. autogenスクリプトを実行しconfigureスクリプトを生成する。

   #+begin_src bash
   ./autogen.sh
   #+end_src

5. configureスクリプトを実行しビルドに必要なMakefileなどの各種ファイルを生成する。この時、有効にする機能をオプションとして指定する。

   #+begin_src bash
   ./configure \
      --with-imagemagick \
      --with-mailutils \
      --with-modules \
      --with-ns \
      --with-pop \
      --with-xwidgets \
      --x-includes=/opt/X11/include \
      --x-libraries=/opt/X11/lib \
      --with-x
   #+end_src

4. Cで実装されたコードをビルドする。

   #+begin_src
   make
   #+end_src

5. macOS用のアプリケーションバンドルを生成する。これによりEmacs Lispで実装されたコードも同梱される。

   #+begin_src
   make install
   #+end_src

6. アプリケーションを/Applications配下のディレクトリに移動する。

   #+begin_src
   sudo mv nextstep/Emacs.app /Applications
   #+end_src

* モダンに設定されたEmacs

Emacsの初期状態はあまり使いやすくはない。そのため自分なりの設定を加え自分に合うようにカスタマイズしていく事が前提となっている。ただし、使いやすいように調整された設定が配布されており、これらは「スターターキット」と呼ばる。スターターキットの中で人気のあるものとして =spacemacs= と =Doom Emacs= が挙げられるだろう。スターターキットは便利である一方で、複雑性を増す事にもなる。その増した複雑性の影響を抑えるため、普段はバニラEmacsを使い、必要に応じて任意のタイミングでspacemacs化したりDoom Emacs化できるようにする。

=./distributions= にはそれらの設定が含まれている。

この処理はあくまで一方向であり、元に戻すためにはEmacsの再起動が必要になる。

詳しくは「[[http://www.symdon.info/ja/posts/1645313344/][Spacemacs/Doom Emacsを飲み込む]]」に記述した。

* Emacsについて文書の記事

Emacsには長い歴史があり、今もコミュニティによって開発が続けらている。そのため根強いファンが世界中に存在し、自らのEmacsについての考えをさまざまな形式で文章にしているファンもいる。内容も多岐に渡り、技術的なメモであったり、主観的であったり、個人的な事柄を含む事もある。

それはその人達が何かしらの仕事に取り組んだ足跡であり、それぞれの考え方を伝えようとしているように思う。私はそのような文章を、短編小説を楽しむように読んでいる。それぞれの文章の著者達の人間味を感じる事ができる。フィクションである事もあるけれど、そんな事はどうでもいい事だと思う。どの作品であれ、そこにはEmacsを大切にする気持ちが溢れている。

ここではそのようなEmacsの文章を記録していく。

- https://qiita.com/sylx/items/46bc993471cd71980aa5
- https://www.itmedia.co.jp/enterprise/articles/0706/26/news003_2.html
- https://gntm-mdk.hatenadiary.com/entry/2016/10/28/073351
- http://kymst.net/index.php?plugin=attach&refer=diary&openfile=diaryFrN57to.pdf
- https://www.hum.grad.fukuoka-u.ac.jp/news/1396/
- https://tomoya.hatenadiary.org/entry/20120327/1332792017
- https://anond.hatelabo.jp/20250203103447
- https://qiita.com/akmiyoshi/items/1c19d1484049683b4cec
